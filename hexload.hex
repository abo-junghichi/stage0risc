# load a program to memory and boot.
# the program is written in hex.

00 00 00 00 # program size

## start
80 00 00 00 # %0 - zero register
80 01 01 00 # %1 - 1
80 04 04 00 # %4 - 4, nibble width
80 06 06 00 # %6 - 6
80 0a 0a 00 # %a - 10, '\n'
80 10 30 00 # %10 - '0'
80 1a 61 00 # %1a - 'a'
80 1b 20 00 # %1b - ' '
80 1c 23 00 # %1c - '#'
80 1d 24 00 # %1d - '$'
80 1e ?? ?? # %1e - memory head, entry point
80 1f 57 00 # %1f - ('a' - 10)
# %20 - branch flag
# %21 - input peek
# %22 - upper nibble
# %23 - lower nibble
80 20 ?? ?? # %24 - memory tail

## parse
a1 21 00 00 # getc peek



## read lower-nibble
# getc peek
# sub peek lower '0'
# sltu lower flag 10
84 20 08 00 # if false, skip next inst
# goto 'store byte'
# sub peek lower 'a'
# sltu lower flag 6
85 20 08 00 # if true, skip next inst
a0 ff ff ff # halt with error
# sub peek lower ('a' - 10)
## store byte



## comment


a0 ff ff ff # halt with error


## end (and chain-load, not impremented yet)


## data
